#include "ImageLoader.h"
#include "picoPNG.h"
#include "IOManager.h"
#include "Error.h"

GLTexture ImageLoader::loadPNG(std::string filePath){
		GLTexture texture = {}; //Initialize struct to zero
		
		std::vector <unsigned char> in;
		std::vector <unsigned char> out;
		
		unsigned long width, height;
		
		if (IOManager::readFileToBuffer(filePath, in)){
			fatalError("Failed to load PNG file to buffer!");
		}
		std::cout << "in size: " << in.size() << std::endl;
		int errorCode = decodePNG(out, width, height, &in[0], in.size());
		std::cout << "Error: " << errorCode << std::endl;
			int i;
		std::cin >> i;


		if (errorCode != 0){
			fatalError("decodePNG failed with error: ");
		}
		
		glGenTextures(1, &(texture.id));
		glBindTexture(GL_TEXTURE_2D, texture.id);
		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, &(out[0]));
		glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 0, 0);
		
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);	
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);	
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);			
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);		
		
		glGenerateMipmap(GL_TEXTURE_2D);
		glBindTexture(GL_TEXTURE_2D, 0);
		
		texture.width = width;
		texture.height = height;
		
		return texture;
}
