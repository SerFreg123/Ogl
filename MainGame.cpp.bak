#include "MainGame.h"
#include <iostream>
#include <string>
#include "Error.h"
#include "ImageLoader.h"

MainGame::MainGame()
{
	_window = nullptr;
	_screenHeight = 512;
	_screenWidth = 512;
	_gameState = GameState::PLAY;  // Have to give namespace to enum classes
}

void MainGame::run(){
	initSystem(720, 720);

	// PONER COORDENADAS DE DIBUJO
	_sprite.init();
	_playerTexture = ImageLoader::loadPNG("Textures/PNG/wizard_fire/attack_1.png");
	gameLoop();
}

void MainGame::initSystem(GLuint width, GLuint height){
	
	
  if(!glfwInit()) fatalError("GLFW could not be initialized!");
	
	_window = glfwCreateWindow(width,height,"Hello Triangles", NULL, NULL);
	
  if(!_window) fatalError("GLFW window could not be created!");
    
  glfwMakeContextCurrent(_window);
  
  glewExperimental= GL_TRUE;
  glewInit();

  const GLubyte *renderer = glGetString(GL_RENDERER);
  const GLubyte *version = glGetString(GL_VERSION);

  printf("Renderer: %s\n", renderer);
  printf("OpenGL version supported %s\n", version);

  glEnable(GL_DEPTH_TEST);
  glDepthFunc(GL_LESS);

  glClearColor(0.0f, 0.0f, 0.0f, 1.0f); // sizeof(ARRAY)/sizeof(ARRAY[0])

	initShaders();
}

void MainGame::initShaders(){
	_colorProgram.compileShaders("Shaders/colorShading.vert.txt", "Shaders/colorShading.frag.txt");
	//_colorProgram.addAtribute("vertexPosition");
	//_colorProgram.addAtribute("vertexColor");
	_colorProgram.linkShaders();
	_colorProgram.use();
}

void MainGame::gameLoop(){
	while (!glfwWindowShouldClose(_window)){
		processInput();
		drawGame();
		
	}
}

void MainGame::processInput(){
	_colorProgram.updateUniformVariables(*_window);
	//_camera.move(_window);
}

void MainGame::drawGame(){
	glClearDepth(1.0);
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);	
	//_colorProgram.use();
	
	//glActiveTexture(GL_TEXTURE0);
	//glBindTexture(GL_TEXTURE_2D, _playerTexture.id);	
	_sprite.draw();
	//_colorProgram.unuse();

	//glBindTexture(GL_TEXTURE_2D, 0);
	glfwPollEvents();
  glfwSwapBuffers(_window);  
}

void MainGame::applyTransformation(){


}

MainGame::~MainGame()
{
}
